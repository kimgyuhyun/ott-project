name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        shell: powershell -ExecutionPolicy Bypass -File {0}
        run: |
          Set-StrictMode -Version Latest
          $ProgressPreference = 'SilentlyContinue'
          $ErrorActionPreference = 'Stop'
          Write-Host '=== CD START ==='
          
          # 현재 커밋 SHA 획득
          $env:COMMIT_SHA = (git rev-parse HEAD).Trim()
          if (-not $env:COMMIT_SHA) { throw 'cannot resolve commit sha' }
          Write-Host "Deploying commit $env:COMMIT_SHA"
          
          # 작업 디렉토리 확인
          Write-Host "Working directory: $PWD"
          
          # 배포 마커 생성 (시작)
          try {
            $deployDir = 'C:\solo-project\ott-project\.deploy'
            if (-not (Test-Path $deployDir)) { New-Item -ItemType Directory -Path $deployDir | Out-Null }
            $marker = "deployed_sha=STARTING`nrun_at=$(Get-Date -Format o)`nuser=$(whoami)"
            Set-Content -Path (Join-Path $deployDir 'last_cd.txt') -Value $marker -Encoding UTF8
          } catch {
            try {
              $publicDir = 'C:\Users\Public\ott_cd'
              if (-not (Test-Path $publicDir)) { New-Item -ItemType Directory -Path $publicDir | Out-Null }
              $marker = "deployed_sha=STARTING`nrun_at=$(Get-Date -Format o)`nuser=$(whoami)"
              Set-Content -Path (Join-Path $publicDir 'last_cd.txt') -Value $marker -Encoding UTF8
            } catch { Write-Host 'marker write failed (STARTING)' }
          }
          
          # SHA 이미지 강제 적용용 임시 override 파일 생성
          $overridePath = Join-Path $env:TEMP 'compose.sha.override.yml'
          $overrideContent = @"
services:
  app:
    image: para98/ott-backend:$($env:COMMIT_SHA)
  frontend:
    image: para98/ott-frontend:$($env:COMMIT_SHA)
"@
          Set-Content -Path $overridePath -Value $overrideContent -Encoding UTF8
          Write-Host "Using override file: $overridePath"
          
          # Docker 인증 설정
          $registry = 'https://index.docker.io/v1/'
          $username = '${{ secrets.REGISTRY_USER }}'
          $password = '${{ secrets.REGISTRY_PASSWORD }}'
          $pair = $username + ':' + $password
          $b64 = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($pair))
          $authObj = @{ auths = @{ $registry = @{ auth = $b64 } } }
          $env:DOCKER_AUTH_CONFIG = ($authObj | ConvertTo-Json -Compress)
          Write-Host "Docker auth configured for registry: $registry"
          
          # Docker 진단
          Write-Host '=== Docker diagnostics ==='
          docker version
          if ($LASTEXITCODE -ne 0) { Write-Host 'docker version failed' }
          docker compose version
          if ($LASTEXITCODE -ne 0) { Write-Host 'docker compose version failed' }
          docker info -f 'Server: {{.ServerVersion}}, OS: {{.OperatingSystem}}'
          if ($LASTEXITCODE -ne 0) { Write-Host 'docker info failed' }
          
          # .env 파일 생성
          $envJson = '${{ toJSON(secrets.ENV_FILE) }}'
          if ($envJson -and $envJson -ne 'null' -and $envJson.Trim() -ne '""') {
            $envContent = [System.Text.RegularExpressions.Regex]::Unescape($envJson.Trim('"'))
            Set-Content -Path .env -Value $envContent -NoNewline
            Write-Host '.env file created'
          }
          
          # Docker Compose로 이미지 pull
          Write-Host '=== COMPOSE PULL (by SHA tag) ==='
          docker compose -f docker-compose.yml -f docker-compose.prod.yml -f $overridePath pull app frontend
          if ($LASTEXITCODE -ne 0) { throw 'docker compose pull failed' }
          
          # Docker Compose로 컨테이너 재생성 및 시작
          Write-Host '=== COMPOSE UP ==='
          docker compose -f docker-compose.yml -f docker-compose.prod.yml -f $overridePath --env-file .env up -d app frontend --force-recreate --no-deps --pull always
          if ($LASTEXITCODE -ne 0) { throw 'docker compose up failed' }
          
          # 배포 검증
          Write-Host '=== VERIFY DEPLOYMENT ==='
          docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
          
          $inspectApp = docker inspect -f "app: {{.Config.Image}} | started={{.State.StartedAt}}" ott-app 2>$null
          if ($inspectApp) { Write-Host $inspectApp } else { Write-Host 'ott-app not found' }
          
          $inspectFe = docker inspect -f "frontend: {{.Config.Image}} | started={{.State.StartedAt}}" ott-frontend 2>$null
          if ($inspectFe) { Write-Host $inspectFe } else { Write-Host 'ott-frontend not found' }
          
          $ha = docker image inspect ("para98/ott-backend:" + $env:COMMIT_SHA) -f 'id={{.Id}} digests={{.RepoDigests}}'
          $hf = docker image inspect ("para98/ott-frontend:" + $env:COMMIT_SHA) -f 'id={{.Id}} digests={{.RepoDigests}}'
          Write-Host "hub app: $ha"
          Write-Host "hub fe:  $hf"
          
          Write-Host '=== RESOLVED COMPOSE IMAGES ==='
          docker compose -f docker-compose.yml -f docker-compose.prod.yml -f $overridePath config --images
          
          # 배포 마커 생성 (완료)
          try {
            $marker = "deployed_sha=$env:COMMIT_SHA`nrun_at=$(Get-Date -Format o)`nuser=$(whoami)"
            Set-Content -Path (Join-Path $deployDir 'last_cd.txt') -Value $marker -Encoding UTF8
          } catch {
            try {
              $publicDir = 'C:\Users\Public\ott_cd'
              if (-not (Test-Path $publicDir)) { New-Item -ItemType Directory -Path $publicDir | Out-Null }
              $marker = "deployed_sha=$env:COMMIT_SHA`nrun_at=$(Get-Date -Format o)`nuser=$(whoami)"
              Set-Content -Path (Join-Path $publicDir 'last_cd.txt') -Value $marker -Encoding UTF8
            } catch { Write-Host 'marker write failed (DONE)' }
          }
          
          Write-Host '=== CD END ==='