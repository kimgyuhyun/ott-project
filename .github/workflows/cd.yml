name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            powershell -NoProfile -NonInteractive -Command "
            $script = @'
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'
            Write-Host '=== CD START ==='
            Set-Location -Path 'C:\solo-project\ott-project'

            # 안전한 동기화 (pull 충돌 회피)
            git fetch origin main
            if ($LASTEXITCODE -ne 0) { throw 'git fetch failed' }
            git reset --hard origin/main
            if ($LASTEXITCODE -ne 0) { throw 'git reset --hard failed' }

            '${{ secrets.REGISTRY_PASSWORD }}' | docker login -u '${{ secrets.REGISTRY_USER }}' --password-stdin
            if ($LASTEXITCODE -ne 0) { throw 'docker login failed' }

            Write-Host 'Docker diagnostics:'
            docker version || Write-Host 'docker version failed'
            docker compose version || Write-Host 'docker compose version failed'
            docker info -f 'Server: {{.ServerVersion}}, OS: {{.OperatingSystem}}' || Write-Host 'docker info failed'

            $envJson = @'${{ toJSON(secrets.ENV_FILE) }}'@
            if ($envJson -and $envJson -ne 'null' -and $envJson.Trim() -ne '""') {
              $envContent = [System.Text.RegularExpressions.Regex]::Unescape($envJson.Trim('"'))
              Set-Content -Path .env -Value $envContent -NoNewline
            }

            Write-Host '=== COMPOSE PULL ==='
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull app frontend
            if ($LASTEXITCODE -ne 0) { throw 'docker compose pull failed' }
            Write-Host '=== COMPOSE UP (pull always) ==='
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d app frontend --force-recreate --no-deps --pull always
            if ($LASTEXITCODE -ne 0) { throw 'docker compose up failed' }

            Write-Host '=== VERIFY IMAGES ==='
            $appObj = (docker inspect ott-app | ConvertFrom-Json)[0]
            $feObj  = (docker inspect ott-frontend | ConvertFrom-Json)[0]
            Write-Host ('app:      ' + $appObj.Config.Image + ' | ' + $appObj.Image + ' | started=' + $appObj.State.StartedAt)
            Write-Host ('frontend: ' + $feObj.Config.Image + ' | ' + $feObj.Image + ' | started=' + $feObj.State.StartedAt)
            $ha = docker image inspect para98/ott-backend:latest  -f 'latestId={{.Id}} digests={{.RepoDigests}}'
            $hf = docker image inspect para98/ott-frontend:latest -f 'latestId={{.Id}} digests={{.RepoDigests}}'
            Write-Host ('hub app: ' + $ha)
            Write-Host ('hub fe:  ' + $hf)

            docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
            Write-Host '=== CD END ==='
            '@
            $path = "$env:TEMP\deploy_ott.ps1"
            Set-Content -Path $path -Value $script -Encoding UTF8
            powershell -NoProfile -ExecutionPolicy Bypass -File $path
            "