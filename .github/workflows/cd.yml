name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          debug: true
          script_stop: true
          command_timeout: 30m
          script: |
            powershell -NoProfile -NonInteractive -Command "
            $script = @'
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'
            Write-Host '=== CD START ==='
            Set-Location -Path 'C:\solo-project\ott-project'

            # Persist a marker for external verification of CD execution
            $deployDir = 'C:\solo-project\ott-project\.deploy'
            if (-not (Test-Path $deployDir)) { New-Item -ItemType Directory -Path $deployDir | Out-Null }
            $marker = "deployed_sha=STARTING`nrun_at=$(Get-Date -Format o)`nuser=$(whoami)"
            Set-Content -Path (Join-Path $deployDir 'last_cd.txt') -Value $marker -Encoding UTF8

            # 안전한 동기화 (pull 충돌 회피)
            git fetch origin main
            if ($LASTEXITCODE -ne 0) { throw 'git fetch failed' }
            git reset --hard origin/main
            if ($LASTEXITCODE -ne 0) { throw 'git reset --hard failed' }

            # 현재 커밋 SHA를 환경변수로 획득 (immutable tag 배포용)
            $env:COMMIT_SHA = (git rev-parse HEAD).Trim()
            if (-not $env:COMMIT_SHA) { throw 'cannot resolve commit sha' }
            Write-Host ('Deploying commit ' + $env:COMMIT_SHA)

            # SHA 이미지 강제 적용용 임시 override 파일 생성
            $overridePath = Join-Path $env:TEMP 'compose.sha.override.yml'
            $overrideLines = @(
              'services:',
              '  app:',
              "    image: para98/ott-backend:$($env:COMMIT_SHA)",
              '  frontend:',
              "    image: para98/ott-frontend:$($env:COMMIT_SHA)"
            )
            $overrideLines | Set-Content -Path $overridePath -Encoding UTF8
            Write-Host ('Using override file: ' + $overridePath)

            '${{ secrets.REGISTRY_PASSWORD }}' | docker login -u '${{ secrets.REGISTRY_USER }}' --password-stdin
            if ($LASTEXITCODE -ne 0) { throw 'docker login failed' }

            Write-Host 'Docker diagnostics:'
            docker version || Write-Host 'docker version failed'
            docker compose version || Write-Host 'docker compose version failed'
            docker info -f 'Server: {{.ServerVersion}}, OS: {{.OperatingSystem}}' || Write-Host 'docker info failed'

            $envJson = @'${{ toJSON(secrets.ENV_FILE) }}'@
            if ($envJson -and $envJson -ne 'null' -and $envJson.Trim() -ne '""') {
              $envContent = [System.Text.RegularExpressions.Regex]::Unescape($envJson.Trim('"'))
              Set-Content -Path .env -Value $envContent -NoNewline
            }

            Write-Host '=== COMPOSE PULL (by SHA tag) ==='
            docker compose -f docker-compose.yml -f docker-compose.prod.yml -f $overridePath pull app frontend
            if ($LASTEXITCODE -ne 0) { throw 'docker compose pull failed' }
            Write-Host '=== COMPOSE UP (pull always) ==='
            docker compose -f docker-compose.yml -f docker-compose.prod.yml -f $overridePath up -d app frontend --force-recreate --no-deps --pull always --env-file .env
            if ($LASTEXITCODE -ne 0) { throw 'docker compose up failed' }

            Write-Host '=== VERIFY IMAGES ==='
            $appObj = (docker inspect ott-app | ConvertFrom-Json)[0]
            $feObj  = (docker inspect ott-frontend | ConvertFrom-Json)[0]
            Write-Host ('app:      ' + $appObj.Config.Image + ' | ' + $appObj.Image + ' | started=' + $appObj.State.StartedAt)
            Write-Host ('frontend: ' + $feObj.Config.Image + ' | ' + $feObj.Image + ' | started=' + $feObj.State.StartedAt)
            $ha = docker image inspect ("para98/ott-backend:" + $env:COMMIT_SHA)  -f 'id={{.Id}} digests={{.RepoDigests}}'
            $hf = docker image inspect ("para98/ott-frontend:" + $env:COMMIT_SHA) -f 'id={{.Id}} digests={{.RepoDigests}}'
            Write-Host ('hub app: ' + $ha)
            Write-Host ('hub fe:  ' + $hf)

            Write-Host '=== RESOLVED COMPOSE IMAGES ==='
            docker compose -f docker-compose.yml -f docker-compose.prod.yml -f $overridePath config --images

            docker compose -f docker-compose.yml -f docker-compose.prod.yml ps

            # Persist a marker and transcript for external verification of CD execution
            $marker = "deployed_sha=$env:COMMIT_SHA`nrun_at=$(Get-Date -Format o)`nuser=$(whoami)"
            Set-Content -Path (Join-Path $deployDir 'last_cd.txt') -Value $marker -Encoding UTF8
            Write-Host 'Writing transcript...'
            Stop-Transcript -ErrorAction SilentlyContinue | Out-Null
            Write-Host '=== CD END ==='
            '@
            $path = 'C:\solo-project\ott-project\deploy_ott.ps1'
            $deployLogDir = 'C:\solo-project\ott-project\.deploy'
            if (-not (Test-Path $deployLogDir)) { New-Item -ItemType Directory -Path $deployLogDir | Out-Null }
            Set-Content -Path $path -Value $script -Encoding UTF8
            if (-not (Test-Path $path)) { throw ('script not written: ' + $path) }
            Start-Transcript -Path (Join-Path $deployLogDir 'cd_transcript.log') -Append | Out-Null
            powershell -NoProfile -ExecutionPolicy Bypass -File $path
            "