# 운영 환경 설정
server:
  port: 8090
  # Behind Nginx/SSL: trust X-Forwarded-* to compute request scheme/host for {baseUrl}
  forward-headers-strategy: framework

# Spring 설정 (통합)
spring:
  # 타임존 설정 (한국 시간)
  jackson:
    time-zone: Asia/Seoul

  # 데이터베이스 설정 (PostgreSQL) - 운영 환경
  datasource:
    url: jdbc:postgresql://${DB_HOST:ott-postgres}:${DB_PORT:5432}/${DB_NAME:ott_project_db}?serverTimezone=Asia/Seoul
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # JPA 설정 - Hibernate ORM
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        jdbc:
          time_zone: Asia/Seoul
          batch_size: 20
        format_sql: false
        order_inserts: true
        order_updates: true

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    out-of-order: false

  # Redis 연결 (도커 기본: ott-redis:6379)
  data:
    redis:
      host: ${REDIS_HOST:ott-redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

  # 메일 설정 (네이버 SMTP)
  mail:
    host: ${MAIL_HOST:smtp.naver.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: false
            trust: smtp.naver.com
            protocols: TLSv1.2
          starttls:
            enable: true
            required: true
          from: ${MAIL_FROM:}
    transport:
      protocol: smtp

  # 세션 설정
  session:
    cookie:
      domain: ${COOKIE_DOMAIN:localhost}
      secure: ${COOKIE_SECURE:false}
      same-site: ${COOKIE_SAME_SITE:lax}
      http-only: true
      max-age: 86400 # 24시간

  # OAuth2 클라이언트 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:}
            client-secret: ${GOOGLE_CLIENT_SECRET:}
            scope: [profile, email]
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            client-name: Google
          kakao:
            client-id: ${KAKAO_CLIENT_ID:}
            client-secret: ${KAKAO_CLIENT_SECRET:}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            scope: [profile_nickname, account_email]
            client-name: Kakao
            provider: kakao
          naver:
            client-id: ${NAVER_CLIENT_ID:}
            client-secret: ${NAVER_CLIENT_SECRET:}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            scope: [name, email]
            client-name: Naver
            provider: naver
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# baseUrl 설정
baseUrl: ${BASE_URL:https://laputa.kozow.com}

# 로깅 설정 (운영 환경)
logging:
  level:
    com.ottproject.ottbackend: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    "org.hibernate.type.descriptor.sql.BasicBinder": WARN
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/ott-backend.log

# TMDB API 설정
tmdb:
  api:
    key: ${TMDB_API_KEY:}
    base-url: https://api.themoviedb.org/3

# Jikan API Rate Limiting 설정
jikan:
  api:
    base-url: https://api.jikan.moe/v4
  rate-limit:
    max-rps: 1.0
    backoff-ms: 1000
    retry:
      backoff-ms: 5000

# Iamport (아임포트) 결제 설정
iamport:
  merchant:
    code: ${IAMPORT_MERCHANT_CODE:}
  rest:
    api-key: ${IAMPORT_API_KEY:}
    api-secret: ${IAMPORT_API_SECRET:}
  webhook:
    url: ${IAMPORT_WEBHOOK_URL:}
  pg:
    kakao:
      channel-key: ${IAMPORT_KAKAO_CHANNEL_KEY:}
    toss:
      channel-key: ${IAMPORT_TOSS_CHANNEL_KEY:}
    nice:
      channel-key: ${IAMPORT_NICE_CHANNEL_KEY:}

# 결제 설정 (운영 환경)
payments:
  test-amount: ${PAYMENT_TEST_AMOUNT:1}
  dev-mode: ${PAYMENT_DEV_MODE:false}

# MyBatis 설정
mybatis:
  mapper-locations: classpath*:/mappers/**/*.xml
  type-aliases-package: com.ottproject.ottbackend.dto
  configuration:
    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl
    map-underscore-to-camel-case: true

# 최근 검색어 Redis 설정
app:
  redis:
    namespace: ${REDIS_NAMESPACE:ott}
  recent-search:
    ttl-days: ${RECENT_SEARCH_TTL_DAYS:30}

# Swagger UI 비활성화 (프로덕션)
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false