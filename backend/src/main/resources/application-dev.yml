# 개발 환경 설정
server:
  port: 8090 # Spring Boot 애플리케이션 포트 설정

# 애니메이션 데이터 자동 동기화 설정
anime:
  auto-sync:
    enabled: true # 개발 환경에서 자동 데이터 수집 활성화
  enhancement:
    auto-enabled: false # Jikan API 수집 완료 후 TMDB API 보완 자동 실행
  voice-actor:
    auto-enabled: false # 성우 데이터 자동 수집 활성화 (개별 테스트용)
  director:
    auto-enabled: false # 디렉터 데이터 자동 수집 활성화 (개별 테스트용)
  character:
    auto-enabled: false # 캐릭터 데이터 자동 수집 활성화 (개별 테스트용)
  join-mapping:
    auto-enabled: false # 구 러너 비활성화 (분리 러너로 대체)
  join:
    character-voice:
      enabled: false   # 캐릭터-성우 조인 러너 실행
    anime-voice:
      enabled: false  # 이후 단계에서 실행
  cast:
    full-sync:
      enabled: true # 새로운 통합 러너 활성화

# TMDB API 설정
tmdb:
  api:
    key: ${TMDB_API_KEY:236d5aa8a13b426e168fe110d66f899b}
    base-url: https://api.themoviedb.org/3

# Jikan API Rate Limiting 설정
jikan:
  api:
    base-url: https://api.jikan.moe/v4
  rate-limit:
    max-rps: 1.0 # 초당 1개 요청 (1초 간격)
    backoff-ms: 1000 # 기본 1초 대기
    retry:
      backoff-ms: 5000 # 429 오류 시 5초 대기

# Spring 설정 (통합)
spring:
  # 타임존 설정 (한국 시간)
  jackson:
    time-zone: Asia/Seoul

  # 데이터베이스 설정 (PostgreSQL)
  datasource:
    url: jdbc:postgresql://${DB_HOST:ott-postgres}:${DB_PORT:5432}/${DB_NAME:ott_project_db}?serverTimezone=Asia/Seoul # PostgreSQL 연결 URL (호스트:포트/데이터베이스)
    driver-class-name: org.postgresql.Driver # PostgreSQL JDBC 드라이버 클래스
    username: ${DB_USERNAME:root} # 데이터베이스 사용자명 (docker-compose.yml 과 일치)
    password: ${DB_PASSWORD:1234} # 데이터베이스 비밀번호 (docker.compose.yml 과 일치)

  # JPA 설정 - Hibernate ORM
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect # PostgreSQL Dialect (SQL 생성 규칙)
    hibernate:
      ddl-auto: validate # 스키마 자동 변경 금지(운영 안전성)
    show-sql: true # SQL 로그 출력 (개발 편의)
    properties:
      hibernate:
        jdbc:
          time_zone: Asia/Seoul
        format_sql: true # SQL 포맷팅 (가독성)

  flyway:
    enabled: true # Flyway 활성화
    locations: classpath:db/migration # 마이그레이션 파일 위치
    baseline-on-migrate: true # 기존 스키마가 있을 때 자동 baseline 생성
    out-of-order: true # 과거 버전 누락분도 허용하여 적용

  # Redis 연결 (도커 기본: ott-redis:6379)
  data:
    redis:
      host: ${REDIS_HOST:ott-redis}
      port: ${REDIS_PORT:6379}

  # 메일 설정 (네이버 SMTP 예시)
  mail:
    host: ${MAIL_HOST:smtp.naver.com} # SMTP 서버
    port: ${MAIL_PORT:587} # STARTTLS 포트
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: false
            trust: smtp.naver.com
            protocols: TLSv1.2
          starttls:
            enable: true
            required: true
          from: ${MAIL_FROM:}
    transport:
      protocol: smtp

  # 세션 설정
  session:
    cookie:
      domain: ${COOKIE_DOMAIN:127.0.0.1}
      secure: ${COOKIE_SECURE:false}
      same-site: ${COOKIE_SAME_SITE:lax}
      http-only: true
      max-age: 86400 # 24시간

  # OAuth2 클라이언트 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:}
            client-secret: ${GOOGLE_CLIENT_SECRET:}
            scope: [profile, email]
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            client-name: Google
          kakao:
            client-id: ${KAKAO_CLIENT_ID:}
            client-secret: ${KAKAO_CLIENT_SECRET:}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            scope: [profile_nickname, account_email]
            client-name: Kakao
            provider: kakao
          naver:
            client-id: ${NAVER_CLIENT_ID:}
            client-secret: ${NAVER_CLIENT_SECRET:}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            scope: [name, email]
            client-name: Naver
            provider: naver
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
# baseUrl 설정
baseUrl: ${BASE_URL:http://127.0.0.1}

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: TRACE
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: TRACE
    org.springdoc: DEBUG
    org.springdoc.core: DEBUG
    com.ottproject.ottbackend.mybatis: DEBUG
    com.ottproject.ottbackend.service: DEBUG
    com.ottproject.ottbackend.controller.PaymentController: DEBUG
    com.ottproject.ottbackend.service.PaymentCommandService: DEBUG
    com.ottproject.ottbackend.controller.FavoriteAnimeController: DEBUG
    com.ottproject.ottbackend.service.FavoriteAnimeService: DEBUG
    com.ottproject.ottbackend.mybatis.FavoriteQueryMapper: DEBUG
    com.ottproject.ottbackend.service.SimpleAnimeDataCollectorService: DEBUG
    com.ottproject.ottbackend.service.SimpleJikanApiService: DEBUG
    com.ottproject.ottbackend.config.AnimeDataInitializer: DEBUG

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
  packages-to-scan: com.ottproject.ottbackend.controller
  paths-to-match: /api/**

# Iamport (아임포트) 결제 설정
iamport:
  merchant:
    code: ${IAMPORT_MERCHANT_CODE:}
  rest:
    api-key: ${IAMPORT_API_KEY:}
    api-secret: ${IAMPORT_API_SECRET:}
  webhook:
    url: ${IAMPORT_WEBHOOK_URL:}
  pg:
    kakao:
      channel-key: ${IAMPORT_KAKAO_CHANNEL_KEY:}
    toss:
      channel-key: ${IAMPORT_TOSS_CHANNEL_KEY:}
    nice:
      channel-key: ${IAMPORT_NICE_CHANNEL_KEY:}

# 테스트 결제 금액 (원) - dev에서는 1원만 실제 청구되도록 설정
payments:
  test-amount: ${PAYMENT_TEST_AMOUNT:1}
  # 개발 환경에서는 모든 결제(정기결제, 차액결제)를 1원으로 처리
  dev-mode: ${PAYMENT_DEV_MODE:true}

# MyBatis 설정 (최상위 루트)
mybatis:
  mapper-locations: classpath*:/mappers/**/*.xml
  type-aliases-package: com.ottproject.ottbackend.dto
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # SQL 로깅 활성화
    map-underscore-to-camel-case: true

# 최근 검색어 Redis 설정
app:
  redis:
    namespace: ${REDIS_NAMESPACE:ott}
  recent-search:
    ttl-days: ${RECENT_SEARCH_TTL_DAYS:30}