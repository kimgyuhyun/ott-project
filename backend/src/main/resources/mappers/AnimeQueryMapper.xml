<?xml version="1.0" encoding="UTF-8" ?> <!-- XML 헤더 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> <!-- MyBatis DTD 참조 -->

<!--
  Mapper: AniQueryMapper
  - 목록/상세/연관(에피소드/장르/제작사) 조회 전용 MyBatis 매퍼
  - Snake_case 컬럼 → camelCase DTO 필드로 alias 매핑
  - 파라미터: 상태/장르/필터/정렬/페이징(limit/offset)
-->
<mapper namespace="com.ottproject.ottbackend.mybatis.AniQueryMapper"> <!-- 인터페이스 FQCN 과 매핑 -->

    <!-- 목록 조회용 공통 FROM/JOIN 블록 -->
    <sql id="base_list_from"> <!-- 다른 쿼리에서 include 로 재사용 -->
        FROM ani_list a <!-- FROM: 작품 목록 테이블 a 에서 시작 -->
        <if test="genreCount != null and genreCount &gt; 0"> <!-- genreIds 가 1개 이상일 때만 장르 AND 필터 적용 -->
            JOIN ( <!-- 장르 AND 매칭된 작품들만 추출하는 서브쿼리 -->
                SELECT ag.ani_list_id <!-- 작품 ID -->
                FROM ani_list_genres ag <!-- 작품 장르 매핑 테이블 -->
                WHERE ag.genre_id IN <!-- 선택된 장르 집합에 속하는 행만 -->
                <foreach collection="genreIds" item="gid" open="(" close=")" separator=","> <!-- IN 절 값 바인딩 -->
                    #{gid} <!-- 단일 장르 ID 바인딩 -->
                </foreach>
                GROUP BY ag.ani_list_id <!-- 작품별로 집계 -->
                HAVING COUNT(DISTINCT ag.genre_id) = #{genreCount} <!-- 모든 선택 장르를 모두 포함한 작품만 남김(AND) -->
            ) gf ON gf.ani_list_id = a.id <!-- 서브 쿼리 결과와 메인 테이블 조인 -->
        </if>
        <if test="tagIds != null and tagIds.size() &gt; 0"> <!-- 태그 OR 필터: 하나라도 포함하면 통과 -->
            JOIN (
                SELECT DISTINCT alt.ani_list_id
                FROM ani_list_tags alt
                WHERE alt.tag_id IN
                <foreach collection="tagIds" item="tid" open="(" close=")" separator=",">
                    #{tid}
                </foreach>
            ) tf ON tf.ani_list_id = a.id
        </if>
    </sql>

    <!-- 목록 조회용 공통 WHERE 블록 -->
    <sql id="base_list_where"> <!-- 재사용 WHERE -->
        WHERE a.is_active = TRUE <!-- WHERE: 비활성 제외(서비스 노출 가능 작품만) -->
        <if test="status != null"> AND a.status = #{status} </if> <!-- 상태 필터: ONGOING/COMPLETED/UPCOMING/HIATUS 중 선택 -->
        <if test="minRating != null"> AND a.rating &gt;= #{minRating}</if>  <!-- 평점 하한: #{minRating} 이상 -->
        <if test="year != null"> AND a.year = #{year}</if> <!-- 방영 연도: 정확히 일치 -->
        <if test="isDub != null"> AND a.is_dub = #{isDub}</if> <!-- 더빙 제공 여부: true/false 매칭 -->
        <if test="isSubtitle != null"> AND a.is_subtitle = #{isSubtitle}</if> <!-- 자막 제공 여부: true/false 매칭 -->
        <if test="isExclusive != null"> AND a.is_exclusive = #{isExclusive}</if> <!-- 독점 여부: true/false 매칭 -->
        <if test="isCompleted != null"> AND a.is_completed = #{isCompleted}</if> <!-- 완결 여부: true/false 매칭 -->
        <if test="isNew != null"> AND a.is_new = #{isNew}</if> <!-- 신작 여부: true/false 매칭 -->
        <if test="isPopular != null"> AND a.is_popular = #{isPopular}</if> <!-- 인기 여부: true/false 매칭 -->
    </sql>

    <!--
      목록 데이터 조회
      - SELECT: 카드에 필요한 최소 컬럼들을 alias 로 DTO 필드에 매핑
      - FROM: ani_list a (+ 선택 장르 조인)
      - WHERE: 활성 작품 + 선택적 필터(status/minRating/year/배지들)
      - ORDER BY: sort 파라미터에 따른 분기(평점/연도/인기/기본)
      - LIMIT/OFFSET: 페이지네이션
    -->
    <!-- 파라미터: {status, genreIds, getCount, minRating, year, isDub, isSubtitle, isExclusive, isCompleted, isNew, isPopular, sort, limit, offset} -->
    <select id="findAniList" resultType="com.ottproject.ottbackend.dto.AniListDto"> <!-- DTO 로 자동 매핑 -->
        SELECT
        a.id AS aniId, <!-- DTO.aniId -->
        a.title AS title, <!-- DTO.title -->
        a.poster_url AS posterUrl, <!-- DTO.posterUrl (snake→camel alias) -->
        a.rating AS rating, <!-- DTO.rating -->
        a.rating_count AS ratingCount, <!-- DTO.ratingCount -->
        a.is_dub AS isDub, <!-- DTO.isDub -->
        a.is_subtitle AS isSubtitle, <!-- DTO.isSubtitle -->
        a.is_exclusive AS isExclusive, <!-- DTO.isExclusive -->
        a.is_new AS isNew, <!-- DTO.isNew -->
        a.is_popular AS isPopular, <!-- DTO.isPopular -->
        a.is_completed AS isCompleted, <!-- DTO.isCompleted -->
        a.status AS animeStatus, <!-- DTO.animeStatus(enum) -->
        a.year AS year, <!-- DTO.year -->
        a.type AS type <!-- DTO.type -->
        <include refid="base_list_from"/> <!-- FROM ani_list a (+ 장르 AND / 태그 OR 서브쿼리 조인) -->
        <include refid="base_list_where"/> <!-- WHERE 활성 + 전달된 필터 조건들 결합 -->
        ORDER BY
        <choose> <!-- 정렬 분기: sort 파라미터가 rating/year/popular 인지에 따라 주요 키 선택, 보조키는 최신순(id DESC) -->
            <when test="sort == 'rating'"> a.rating DESC, a.id DESC </when> <!-- 평점 높은 순 → 같은 평점이면 최신순 -->
            <when test="sort == 'year'"> a.year DESC, a.id DESC </when> <!-- 최신 연도 우선 → 같은 연도면 최신순 -->
            <when test="sort == 'popular'"> a.is_popular DESC, a.id DESC </when> <!-- 인기 플래그 우선 → 최신순 -->
            <otherwise> a.id DESC </otherwise> <!-- 기본: 최신 등록순 -->
        </choose>
        LIMIT #{limit} OFFSET #{offset} <!-- 페이지네이션 -->
    </select>

    <!--
      목록 총 개수
      - SELECT COUNT(1)
      - FROM/WHERE는 목록과 동일 → 페이지네이션 total 계산
    -->
    <select id="countAniList" resultType="long"> <!-- 개수 반환 -->
        SELECT COUNT(1) <!-- 총 행 수 -->
        <include refid="base_list_from"/> <!-- 공통 FROM/JOIN -->
        <include refid="base_list_where"/> <!-- 동일 WHERE -->
    </select>

    <!-- 상세: 태그 리스트 (aniId 기준) -->
    <select id="findTagsByAniId" resultType="com.ottproject.ottbackend.dto.TagSimpleDto">
        SELECT
        t.id AS id,
        t.name AS name,
        t.color AS color
        FROM tags t
        JOIN ani_list_tags alt ON alt.tag_id = t.id
        WHERE alt.ani_list_id = #{aniId}
        ORDER BY t.name ASC
    </select>

    <!--
      상세 헤더/더보기 영역 (aniId 기준)
      - SELECT: 헤더·배지·상태·방영정보·집계·타임스탬프를 DTO로 매핑
      - FROM ani_detail d JOIN ani_list a (1:1)
      - WHERE a.id = #{aniId}
    -->
    <select id="findAniDetailByAniId" resultType="com.ottproject.ottbackend.dto.AniDetailDto"> <!-- 단건 DTO -->
        SELECT
        a.id AS aniId, <!-- DTO.aniId -->
        d.id AS detailId, <!-- DTO.detailId -->
        a.title AS title, <!-- DTO.title -->
        a.title_en AS titleEn, <!-- DTO.titleEn -->
        a.title_jp AS titleJp, <!-- DTO.titleJp -->
        a.poster_url AS posterUrl, <!-- DTO.posterUrl -->

        a.rating AS rating, <!-- DTO.rating -->
        a.rating_count AS ratingCount, <!-- DTO.ratingCount -->
        a.age_rating AS ageRating, <!-- DTO.ageRating -->
        a.status AS animeStatus, <!-- DTO.animeStatus(enum) -->

        a.is_completed AS isCompleted, <!-- DTO.isCompleted -->
        a.is_exclusive AS isExclusive, <!-- DTO.isExclusive -->
        a.is_popular AS isPopular, <!-- DTO.isPopular -->
        a.is_new AS isNew, <!-- DTO.isNew -->
        a.is_subtitle AS isSubtitle, <!-- DTO.isSubtitle -->
        a.is_dub AS isDub, <!-- DTO.isDub -->
        a.is_simulcast AS isSimulcast, <!-- DTO.isSimulcast -->
        a.is_active AS isActive, <!-- DTO.isActive -->

        d.full_synopsis AS fullSynopsis, <!-- DTO.fullSynopsis -->
        d.voice_actors AS voiceActors, <!-- DTO.voiceActors -->

        a.release_date AS releaseDate, <!-- DTO.releaseDate -->
        a.end_date AS endDate, <!-- DTO.endDate -->
        a.broadcast_day AS broadcastDay, <!-- DTO.broadcastDay -->
        a.broad_cast_time AS broadcastTime, <!-- DTO.broadcastTime-->
        a.season AS season, <!-- DTO.season -->
        a.year AS year, <!-- DTO.year -->
        a.type AS type, <!-- DTO.type -->
        a.duration AS duration, <!-- DTO.duration -->
        d.release_quarter AS releaseQuarter, <!-- DTO.releaseQuarter -->
        a.source AS source, <!-- DTO.source -->
        a.country AS country, <!-- DTO.country -->
        a.language AS language, <!-- DTO.language -->
        d.director AS director, <!-- DTO.director -->

        a.total_episodes AS totalEpisodes, <!-- DTO.totalEpisodes -->
        d.current_episodes AS currentEpisodes, <!-- DTO.currentEpisodes -->

        d.created_at AS createdAt, <!-- DTO.createdAt -->
        d.updated_at AS updatedAt <!-- DTO.updatedAt -->
        FROM ani_detail d <!-- 상세 테이블 -->
        JOIN ani_list a ON a.id = d.ani_list_id <!-- 목록과 1:1 조인 -->
        WHERE a.id = #{aniId} <!-- 경로 파라미터 -->
    </select>

    <!--
      상세: 에피소드 리스트 (aniId 기준)
      - SELECT: 에피소드 표시 컬럼
      - FROM episode e JOIN ani_detail d
      - WHERE d.ani_list_id = #{aniId}
      - ORDER BY 화수 오름차순
    -->
    <select id="findEpisodesByAniId" resultType="com.ottproject.ottbackend.dto.EpisodeDto"> <!-- 리스트 DTO -->
        SELECT
        e.id AS id, <!-- EpisodeDto.id-->
        e.episode_number AS episodeNumber, <!-- EpisodeDto.episodeNumber-->
        e.title AS title, <!-- EpisodeDto.title -->
        e.thumbnail_url AS thumbnailUrl, <!-- EpisodeDto.thumbnailUrl-->
        e.video_url AS videoUrl, <!-- EpisodeDto.videoUrl -->
        e.is_active AS isActive, <!-- EpisodeDto.isActive -->
        e.is_released AS isReleased, <!-- EpisodeDto.isReleased -->
        e.created_at AS createdAt, <!-- EpisodeDto.createdAt-->
        e.updated_at AS updatedAt <!-- EpisodeDto.updatedAt-->
        FROM episode e <!-- 에피소드 테이블 -->
        JOIN ani_detail d ON d.id = e.ani_detail_id <!-- 상세와 조인 -->
        WHERE d.ani_list_id = #{aniId} <!-- aniId 기준 조회 -->
        ORDER BY e.episode_number ASC <!-- 회수 오름차순-->
    </select>

    <!--
      상세: 장르 리스트 (aniId 기준)
      - SELECT: 장르 표시 컬럼
      - FROM genres g JOIN ani_list_genres ag
      - WHERE ag.ani_list_id = #{aniId}
    -->
    <select id="findGenresByAniId" resultType="com.ottproject.ottbackend.dto.GenreSimpleDto"> <!-- 제작사 간단 DTO -->
        SELECT
        g.id AS id, <!-- GenreSimpleDto.id -->
        g.name AS name, <!-- GenreSimpleDto.name -->
        g.color AS color <!-- GenreSimpleDto.color -->
        FROM genres g <!-- 장르 테이블 -->
        JOIN ani_list_genres ag ON ag.genre_id = g.id <!-- 중간 테이블 -->
        WHERE ag.ani_list_id = #{aniId} <!-- aniId -->
        ORDER BY g.name ASC <!-- 이름 정렬 -->
    </select>

    <!--
      상세: 제작사 리스트 (aniId 기준)
      - SELECT: 제작사 표시 컬럼
      - FROM studios s JOIN ani_list_studios asg
      - WHERE asg.ani_list_id = #{aniId}
    -->
    <select id="findStudiosByAniId" resultType="com.ottproject.ottbackend.dto.StudioSimpleDto"> <!-- 제작사 간단 DTO -->
        SELECT
        s.id AS id, <!-- studiosSimpleDto.id -->
        s.name AS name, <!-- studiosSimpleDto.name -->
        s.logo_url AS logoUrl, <!-- studiosSimpleDto.logoUrl -->
        s.country AS country <!-- studiosSimpleDto.country -->
        FROM studios s <!-- 제작사 테이블 -->
        JOIN ani_list_studios asg ON asg.studio_id = s.id  <!-- 중간 테이블 -->
        WHERE asg.ani_list_id = #{aniId} <!-- aniId 기준 -->
        ORDER BY s.name ASC <!-- 이름 정렬 -->
    </select>

    <!--
      상세 + 찜 여부 동시 조회
      - SELECT: 상세 헤더 컬럼 + CASE 로 isFavorited 계산(로그인 시)
      - FROM ani_detail d JOIN ani_list a (+ 로그인 시 LEFT JOIN ani_favorites f)
      - WHERE a.id = #{aniId}
    -->
    <select id="findAniDetailByAniIdWithUser" resultType="com.ottproject.ottbackend.dto.AniDetailDto"> <!-- 상세 + 찜 여부 동시 조회 -->
        SELECT /* 헤더 기본 컬럼들 */
        a.id AS aniId, <!-- DTO.aniId -->
        d.id AS detailId, <!-- DTO.detailId -->
        a.title AS title, <!-- DTO.title -->
        a.title_en AS titleEn, <!-- DTO.titleEn -->
        a.title_jp AS titleJp, <!-- DTO.titleJp -->
        a.poster_url AS posterUrl, <!-- DTO.posterUrl -->

        a.rating AS rating, <!-- DTO.rating -->
        a.rating_count AS ratingCount, <!-- DTO.ratingCount -->
        a.age_rating AS ageRating, <!-- DTO.ageRating -->
        a.status AS animeStatus, <!-- DTO.animeStatus -->

        a.is_completed AS isCompleted, <!-- DTO.isCompleted -->
        a.is_exclusive AS isExclusive, <!-- DTO.isExclusive -->
        a.is_popular AS isPopular, <!-- DTO.isPopular -->
        a.is_new AS isNew, <!-- DTO.isNew -->
        a.is_subtitle AS isSubtitle, <!-- DTO.isSubtitle -->
        a.is_dub AS isDub, <!-- DTO.isDub -->
        a.is_simulcast AS isSimulcast, <!-- DTO.isSimulcast -->
        a.is_active AS isActive, <!-- DTO.isActive -->

        d.full_synopsis AS fullSynopsis, <!-- DTO.fullSynopsis (기존 오탈자 fillSynopsis → fullSynopsis) -->
        d.voice_actors AS voiceActors, <!-- DTO.voiceActors -->

        a.release_date AS releaseDate, <!-- DTO.releaseDate -->
        a.end_date AS endDate, <!-- DTO.endDate -->
        a.broadcast_day AS broadcastDay, <!-- DTO.broadcastDay -->
        a.broad_cast_time AS broadcastTime, <!-- DTO.broadcastTime -->
        a.season AS season, <!-- DTO.season -->
        a.year AS year, <!-- DTO.year -->
        a.type AS type, <!-- DTO.type -->
        a.duration AS duration, <!-- DTO.duration -->
        d.release_quarter AS releaseQuarter, <!-- DTO.releaseQuarter -->
        a.source AS source, <!-- DTO.source -->
        a.country AS country, <!-- DTO.country -->
        a.language AS language, <!-- DTO.language -->
        d.director AS director, <!-- DTO.director -->

        a.total_episodes AS totalEpisodes, <!-- DTO.totalEpisodes -->
        d.current_episodes AS currentEpisodes, <!-- DTO.currentEpisodes -->

        d.created_at AS createdAt, <!-- DTO.createdAt -->
        d.updated_at AS updatedAt, <!-- DTO.updatedAt -->

        <!-- 찜 여부: 로그인 시 LEFT JOIN 결과로 판단, 비로그인 시 false 고정 -->
        <if test="currentUserId != null">
            CASE WHEN f.user_id IS NULL THEN FALSE ELSE TRUE END AS isFavorited <!-- DTO.isFavorited -->
        </if>
        <if test="currentUserId == null">
            FALSE AS isFavorited <!-- DTO.isFavorited: 비로그인 기본 false -->
        </if>
        FROM ani_detail d <!-- 상세 테이블 -->
        JOIN ani_list a ON a.id = d.ani_list_id <!-- 목록과 1:1 조인 -->
        <if test="currentUserId != null">
            LEFT JOIN ani_favorites f ON f.ani_list_id = a.id AND f.user_id = #{currentUserId} <!-- 사용자 기준 찜 조인 -->
        </if>
        WHERE a.id = #{aniId} <!-- 대상 aniId -->
    </select>

<!-- end of AniQueryMapper -->
</mapper>