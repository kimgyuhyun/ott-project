spring:
  application:
    name: ott-project

  # JVM SSL/TLS Settings
  jvm:
    args: -Djdk.tls.client.protocols=TLSv1.2 -Dhttps.protocols=TLSv1.2

  # PostgreSQL Database Configuration
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/ott_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&useSSL=false
    username: postgres
    password: 1234

    # Connection Pool Configuration
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 60000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 30000
      validation-timeout: 5000
      connection-test-query: SELECT 1

  # JPA Configuration
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        hbm2ddl:
          auto: update
        jdbc:
          lob:
            non_contextual_creation: true
        connection:
          characterEncoding: utf-8
          CharSet: utf-8
          useUnicode: true
        dialect:
          storage_engine: innodb
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  # DevTools 설정
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
    add-properties: false

  # Flyway 설정
  flyway:
    enabled: true
    baseline-on-migrate: true
    validate-on-migrate: true

  # SpringDoc OpenAPI (Swagger) 설정
  doc:
    api-docs:
      path: /api-docs
    swagger-ui:
      path: /swagger-ui.html
      operationsSorter: method
      tagsSorter: alpha
      doc-expansion: none
      disable-swagger-default-url: true
    default-produces-media-type: application/json
    default-consumes-media-type: application/json

  # Email Configuration (Naver Mail SMTP - TLS)
  mail:
    host: smtp.naver.com
    port: 587
    username: kgh9806@naver.com
    password: N3K3PHPKJFFR
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
          from: kgh9806@naver.com
        transport:
          protocol: smtp

  # OAuth2 Configuration - Google
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 1069317752335-aq6vf01m7g9vi2rr0j98v4fqucpg2ms3.apps.googleusercontent.com
            client-secret: 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
            scope: profile,email,https://www.googleapis.com/auth/gmail.send,https://www.googleapis.com/auth/gmail.compose
            redirect-uri: "{baseUrl}/login/oauth2/code/google"

          kakao:
            client-id: 2fbc3b82d72256414ad0a2d585ba6e34
            client-secret: rM1vTsa1ZSOHZgehzXL39ih5waGoWAOP
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            scope: profile_nickname,account_email
            client-name: Kakao
            provider: kakao

          naver:
            client-id: mJkYSXP3bMuWgBTuujrX
            client-secret: Kf8VXRPIrM
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8090/login/oauth2/code/naver
            scope: name,email
            client-name: Naver
            provider: naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # Redis Configuration
  data:
    redis:
      host: redis
      port: 6379
      password: 
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      use-key-prefix: true

  # Jackson Configuration
  jackson:
    time-zone: Asia/Seoul

  # MVC Configuration
  mvc:
    timezone: Asia/Seoul

  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

# Server Configuration
server:
  port: 8090
  use-forward-headers: true
  servlet:
    session:
      timeout: 30m
      cookie:
        http-only: false
        secure: false
        same-site: lax
        path: /
        domain: 
        max-age: 1800
      tracking-modes: cookie
      persistent: true

# Logging Configuration
logging:
  level:
    root: INFO
    org:
      hibernate:
        SQL: INFO
        type:
          descriptor:
            sql:
              BasicBinder: INFO
      springframework:
        security:
          oauth2: DEBUG
        mail: DEBUG
        data:
          redis: DEBUG
        web:
          servlet:
            mvc:
              method:
                annotation:
                  RequestMappingHandlerMapping: TRACE
                  RequestMappingHandlerAdapter: TRACE
    com:
      ottproject:
        service: DEBUG
        repository: DEBUG
        config: DEBUG

# Debug mode for error details
debug: false

# JVM 시간대 설정 KST로
user:
  timezone: Asia/Seoul

# Frontend URL Configuration
app:
  frontend:
    url: http://localhost:3000
    https:
      url: https://localhost:3000
  upload:
    path: ./uploads
    profile-images: ./uploads/profile-images

# API Keys (필요시 추가)

# Iamport API Configuration
iamport:
  api:
    key: 8201235634202547
    secret: qyslByu4xgum1lnWk7Z47YdGtdTAP4HcqCSMwNVzXD00ZSveeSZAAdkQuvzB5DJKpB3xZVf0nMASPPbK
    imp:
      code: imp45866522

# Gmail Service Account Configuration (주석 처리)
# gmail:
#   service:
#     account:
#       enabled: true
#       email: howcrazy9806@gmail.com
#       private-key-id: your-private-key-id
#       private-key: your-private-key
#       client-id: 1069317752335-aq6vf01m7g9vi2rr0j98v4fqucpg2ms3.apps.googleusercontent.com
#       client-email: your-service-account-email@your-project.iam.gserviceaccount.com
#       client-id-service: your-service-account-client-id
#       auth-uri: https://accounts.google.com/o/oauth2/auth
#       token-uri: https://oauth2.googleapis.com/token
#       auth-provider-x509-cert-url: https://www.googleapis.com/v1/certs
#       client-x509-cert-url: https://www.googleapis.com/robot/v1/metadata/x509/your-service-account-email%40your-project.iam.gserviceaccount.com 